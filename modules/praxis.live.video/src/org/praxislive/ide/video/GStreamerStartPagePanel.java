/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2020 Neil C Smith.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 3 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 3 for more details.
 *
 * You should have received a copy of the GNU General Public License version 3
 * along with this work; if not, see http://www.gnu.org/licenses/
 *
 *
 * Please visit http://neilcsmith.net if you need additional information or
 * have any questions.
 */
package org.praxislive.ide.video;

import com.sun.jna.Platform;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.prefs.Preferences;
import javax.swing.JPanel;
import org.netbeans.api.options.OptionsDisplayer;
import org.openide.*;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.ServiceProvider;
import org.praxislive.ide.core.api.IDE;
import org.praxislive.ide.core.ui.spi.StartPagePanelProvider;
import org.praxislive.video.gstreamer.configuration.GStreamerSettings;

/**
 *
 */
@Messages({
    "TITLE_GStreamerStartPanel=Video playback and capture",
    "BTN_Reinstall=Reinstall",})
public class GStreamerStartPagePanel extends javax.swing.JPanel {

    private final static String KEY_DOWNLOAD_WIN32 = "gstreamer-download-win32";
    private final static String KEY_DOWNLOAD_WIN64 = "gstreamer-download-win64";
    private final static String KEY_DOWNLOAD_MAC = "gstreamer-download-mac";

    private URI downloadLink;

    /**
     * Creates new form ExamplesStartPagePanel
     */
    public GStreamerStartPagePanel() {
        initComponents();
        downloadButton.setVisible(false);
        refresh();
    }

    private boolean refresh() {
        downloadButton.setVisible(false);
        String libPath = GStreamerSettings.getLibraryPath();
        if (libPath.isEmpty() || new File(libPath).exists()) {
            statusDisplay.setText("");
            return true;
        } else {
            downloadLink = null;
            String link = "";
            Preferences info = IDE.getPreferences();
            if (Platform.isWindows()) {
                if (Platform.is64Bit()) {
                    link = info.get(KEY_DOWNLOAD_WIN64, "");
                } else {
                    link = info.get(KEY_DOWNLOAD_WIN32, "");
                }
            } else if (Platform.isMac()) {
                link = info.get(KEY_DOWNLOAD_MAC, "");
            }
            if (!link.isEmpty()) {
                try {
                    downloadLink = new URI(link);
                    downloadButton.setVisible(true);
                    return true;
                } catch (URISyntaxException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusDisplay = new javax.swing.JLabel();
        configureButton = new javax.swing.JButton();
        infoScrollPane = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        downloadButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(statusDisplay, org.openide.util.NbBundle.getMessage(GStreamerStartPagePanel.class, "LBL_NotFound")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(configureButton, org.openide.util.NbBundle.getMessage(GStreamerStartPagePanel.class, "BTN_Configure")); // NOI18N
        configureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configureButtonActionPerformed(evt);
            }
        });

        infoScrollPane.setBorder(null);

        infoTextArea.setEditable(false);
        infoTextArea.setColumns(20);
        infoTextArea.setLineWrap(true);
        infoTextArea.setRows(8);
        infoTextArea.setText(org.openide.util.NbBundle.getMessage(GStreamerStartPagePanel.class, "INFO_GStreamerStartPanel")); // NOI18N
        infoTextArea.setWrapStyleWord(true);
        infoTextArea.setBorder(null);
        infoTextArea.setOpaque(false);
        infoScrollPane.setViewportView(infoTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(downloadButton, org.openide.util.NbBundle.getMessage(GStreamerStartPagePanel.class, "BTN_Download")); // NOI18N
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusDisplay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                        .addComponent(downloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(configureButton))
                    .addComponent(infoScrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(infoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configureButton)
                    .addComponent(statusDisplay)
                    .addComponent(downloadButton))
                .addContainerGap())
        );

        infoScrollPane.setOpaque(false);
        infoScrollPane.getViewport().setOpaque(false);
    }// </editor-fold>//GEN-END:initComponents

    private void configureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configureButtonActionPerformed
        OptionsDisplayer.getDefault().open("Video/Capture");
    }//GEN-LAST:event_configureButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        if (downloadLink != null) {
            openExternalLink(downloadLink);
        }
    }//GEN-LAST:event_downloadButtonActionPerformed

    private static void openExternalLink(URI link) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(link);
                return;
            } catch (IOException ex) {
                // fall through
            }
        }
        DialogDisplayer.getDefault().notify(
                new NotifyDescriptor.Message("Unable to open link " + link,
                NotifyDescriptor.ERROR_MESSAGE));
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton configureButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JScrollPane infoScrollPane;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JLabel statusDisplay;
    // End of variables declaration//GEN-END:variables

    @ServiceProvider(service = StartPagePanelProvider.class, position = 1000)
    public static class Provider implements StartPagePanelProvider {

        private final GStreamerStartPagePanel panel = new GStreamerStartPagePanel();

        @Override
        public String getTitle() {
            return Bundle.TITLE_GStreamerStartPanel();
        }

        @Override
        public JPanel getPanel() {
            return panel;
        }

        @Override
        public boolean refresh() {
            return panel.refresh();
        }

    }

}
